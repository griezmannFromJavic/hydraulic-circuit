(define (dfs-init graph initial-node)
	(define tree '())
	;(define visited (list initial-node))
	(define visited '())
	(define (neighbours node) (cadr (assoc node adjacency-list-undirected)))
	(define (unvisited-neighbours node) (set-difference (neighbours node) visited))
	(define (dfs parent child)
		(if (null? (unvisited-neighbours parent))
			(reverse tree)
			(begin
				(set! visited (cons parent visited)) ; ne znan Å¡to bi tu stavi
				(display "tree before cons: ")
				(display tree)
				(newline) (newline)
				(set! tree
					(cons (list parent child) tree)
					)

				(display "visited: ")
				(display visited)
				(newline) (newline)		
				(display "unvisited neighbours: ")
				(display unvisited-neighbours)
				(newline) (newline)
				(display "tree after cons: ")
				(display tree)
				(newline) (newline)
				(display "-----------------------------------")
				(newline) (newline)

			(map (lambda (x) (dfs child x)) (unvisited-neighbours child))
			)))
	(dfs-init graph initial-node)
	)
